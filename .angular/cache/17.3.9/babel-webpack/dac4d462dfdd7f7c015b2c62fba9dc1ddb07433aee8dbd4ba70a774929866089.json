{"ast":null,"code":"import { NodeDialogComponent } from './node-dialog/node-dialog.component';\nimport Drawflow from 'drawflow';\nimport interact from 'interactjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nfunction AppComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function AppComponent_li_7_Template_button_click_2_listener() {\n      const i_r3 = i0.ɵɵrestoreView(_r2).index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.openEditDialog(i_r3));\n    });\n    i0.ɵɵtext(3, \" Edit \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵattribute(\"data-node-name\", item_r5.name)(\"data-index\", i_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r5.name, \" \");\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    dialog;\n    drawflow;\n    id = null;\n    data = {\n      name: ''\n    };\n    items = [{\n      name: 'Node 1'\n    }, {\n      name: 'Node 2'\n    }, {\n      name: 'Node 3'\n    }];\n    newItemName = '';\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n    ngOnInit() {\n      this.id = document.getElementById('drawflow');\n      this.drawflow = new Drawflow(this.id);\n      this.drawflow.start();\n      // Initialize draggable items\n      interact('.draggable-item').draggable({\n        inertia: true,\n        autoScroll: true,\n        onstart: event => {\n          // Store the original position\n          const target = event.target;\n          const rect = target.getBoundingClientRect();\n          target.setAttribute('data-start-x', rect.left);\n          target.setAttribute('data-start-y', rect.top);\n        },\n        onmove: this.dragMoveListener,\n        onend: event => {\n          if (!event.target.dropzone) {\n            const startX = event.target.getAttribute('data-start-x');\n            const startY = event.target.getAttribute('data-start-y');\n            // Snap back to original position\n            event.target.style.transform = 'translate(0px, 0px)';\n            event.target.style.left = `${startX}px`;\n            event.target.style.top = `${startY}px`;\n            event.target.removeAttribute('data-x');\n            event.target.removeAttribute('data-y');\n          }\n        }\n      });\n      // Set up the dropzone\n      interact('#drawflow').dropzone({\n        accept: '.draggable-item',\n        // Accept items with class .draggable-item\n        overlap: 0.75,\n        ondrop: event => {\n          const nodeName = event.relatedTarget.getAttribute('data-node-name');\n          const index = event.relatedTarget.getAttribute('data-index');\n          const x = event.dragEvent.clientX - event.target.getBoundingClientRect().left - 200;\n          const y = event.dragEvent.clientY - event.target.getBoundingClientRect().top - 50;\n          this.addNode(nodeName, x, y);\n          // Check for cycles after adding the node\n          // if (this.hasCycle()) {\n          //   alert('Error: Cycle detected in the workflow!');\n          // }\n        },\n        ondropdeactivate: event => {\n          const startX = event.relatedTarget.getAttribute('data-start-x');\n          const startY = event.relatedTarget.getAttribute('data-start-y');\n          event.relatedTarget.style.transform = 'translate(0px, 0px)';\n          event.relatedTarget.style.left = `${startX}px`;\n          event.relatedTarget.style.top = `${startY}px`;\n          event.relatedTarget.removeAttribute('data-x');\n          event.relatedTarget.removeAttribute('data-y');\n        }\n      });\n      this.drawflow.on('connectionCreated', event => {\n        console.log('Connection Created:', event);\n        const outputNode = this.drawflow.getNodeFromId(event.output_id);\n        const inputNode = this.drawflow.getNodeFromId(event.input_id);\n        if (outputNode.name === inputNode.name) {\n          alert('Error: Cannot connect two consecutive nodes with the same name!');\n          this.drawflow.removeSingleConnection(event.output_id, event.input_id, event.output_class, event.input_class);\n        } else if (this.hasCycle()) {\n          alert('Error: Cycle detected in the workflow!');\n          this.drawflow.removeSingleConnection(event.output_id, event.input_id, event.output_class, event.input_class);\n        }\n      });\n    }\n    openDialog() {\n      const dialogRef = this.dialog.open(NodeDialogComponent, {\n        width: '250px',\n        data: {\n          name: '',\n          mode: 'create'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result && result.action === 'create') {\n          this.newItemName = result.name;\n          if (typeof this.newItemName === 'string') {\n            this.items.push({\n              name: this.newItemName\n            });\n          }\n        }\n      });\n    }\n    dragMoveListener(event) {\n      const target = event.target;\n      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n      target.style.transform = `translate(${x}px, ${y}px)`;\n      target.setAttribute('data-x', x);\n      target.setAttribute('data-y', y);\n    }\n    addNode(nodeName, x, y) {\n      var html = document.createElement('div');\n      html.innerHTML = nodeName;\n      this.drawflow.registerNode('test', html);\n      this.drawflow.addNode(nodeName, 1, 1, x, y, 'github', this.data, 'test', true);\n    }\n    openEditDialog(index) {\n      const dialogRef = this.dialog.open(NodeDialogComponent, {\n        width: '250px',\n        data: {\n          name: this.items[index].name,\n          index: index,\n          mode: 'edit'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          if (result.action === 'edit') {\n            this.items[index].name = result.name;\n          } else if (result.action === 'delete') {\n            this.deleteItem(index);\n          }\n        }\n      });\n    }\n    removeNodeFromDrawflow(index) {\n      const item = document.querySelector(`.draggable-item[data-index=\"${index}\"]`);\n      if (item) {\n        item.style.display = 'none';\n        setTimeout(() => {\n          item.style.display = '';\n        }, 0);\n      }\n    }\n    createNode() {\n      const nodeNameInput = document.getElementById('nodeNameInput');\n      const nodeName = nodeNameInput.value;\n      if (nodeName) {\n        this.addNode(nodeName, 50, 50); // You can adjust the x and y coordinates as needed\n        nodeNameInput.value = ''; // Clear the input field after creating the node\n      } else {\n        alert('Please enter a node name');\n      }\n    }\n    addItem() {\n      if (this.newItemName) {\n        if (this.items.some(item => item.name === this.newItemName)) {\n          alert('Item with this name already exists');\n        } else {\n          this.items.push({\n            name: this.newItemName\n          });\n          this.newItemName = '';\n        }\n      } else {\n        alert('Please enter an item name');\n      }\n    }\n    deleteItem(index) {\n      this.items.splice(index, 1);\n    }\n    exportWorkflow() {\n      const workflowData = this.drawflow.export();\n      console.log('Exported Workflow Data:', workflowData);\n      const processedData = this.processWorkflowData(workflowData);\n      this.downloadWorkflow(processedData);\n      // You can now process or store the workflowData as needed\n    }\n    processWorkflowData(workflowData) {\n      const processedData = {\n        nodes: []\n      };\n      for (const key in workflowData.drawflow.Home.data) {\n        const node = workflowData.drawflow.Home.data[key];\n        const itemName = this.items.find(item => item.name === node.name)?.name || node.name;\n        const connections = [];\n        // Collect names of connected nodes\n        for (const outputKey in node.outputs) {\n          const outputConnections = node.outputs[outputKey].connections;\n          for (const connection of outputConnections) {\n            const connectedNode = workflowData.drawflow.Home.data[connection.node];\n            const connectedNodeName = this.items.find(item => item.name === connectedNode.name)?.name || connectedNode.name;\n            connections.push(connectedNodeName);\n          }\n        }\n        processedData.nodes.push({\n          id: node.id,\n          name: itemName,\n          connections: connections\n        });\n      }\n      return processedData;\n    }\n    downloadWorkflow(workflowData) {\n      const dataStr = JSON.stringify(workflowData, null, 2);\n      const blob = new Blob([dataStr], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'workflow.json';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n    hasCycle() {\n      const workflowData = this.drawflow.export();\n      const graph = this.buildGraph(workflowData);\n      return this.detectCycle(graph);\n    }\n    buildGraph(workflowData) {\n      const graph = new Map();\n      for (const key in workflowData.drawflow.Home.data) {\n        const node = workflowData.drawflow.Home.data[key];\n        graph.set(key, []);\n        for (const outputKey in node.outputs) {\n          const connections = node.outputs[outputKey].connections;\n          for (const connection of connections) {\n            graph.get(key).push(connection.node);\n          }\n        }\n      }\n      return graph;\n    }\n    detectCycle(graph) {\n      const visited = new Set();\n      const recStack = new Set();\n      const dfs = node => {\n        if (!visited.has(node)) {\n          visited.add(node);\n          recStack.add(node);\n          const neighbors = graph.get(node) || [];\n          for (const neighbor of neighbors) {\n            if (!visited.has(neighbor) && dfs(neighbor)) {\n              return true;\n            } else if (recStack.has(neighbor)) {\n              return true;\n            }\n          }\n        }\n        recStack.delete(node);\n        return false;\n      };\n      for (const node of graph.keys()) {\n        if (dfs(node)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    static ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MatDialog));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"my-app\"]],\n      decls: 12,\n      vars: 1,\n      consts: [[\"drawflow\", \"\"], [1, \"floating-button\", 3, \"click\"], [1, \"container\"], [1, \"sidebar\"], [2, \"font-family\", \"system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\", \"font-weight\", \"700\"], [\"id\", \"draggable-list\"], [\"class\", \"draggable-item\", \"draggable\", \"true\", 4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", 1, \"add-button\", 2, \"color\", \"rgb(104, 197, 197)\", \"background-color\", \"rgb(67, 67, 67)\", 3, \"click\"], [\"id\", \"drawflow\"], [\"draggable\", \"true\", 1, \"draggable-item\"], [1, \"edit-button\", 2, \"color\", \"rgb(104, 197, 197)\", \"background-color\", \"rgb(67, 67, 67)\", 3, \"click\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_0_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.exportWorkflow());\n          });\n          i0.ɵɵtext(1, \"Export Workflow\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5, \"Nodes List\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"ul\", 5);\n          i0.ɵɵtemplate(7, AppComponent_li_7_Template, 4, 3, \"li\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.openDialog());\n          });\n          i0.ɵɵtext(9, \"Add Node\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(10, \"div\", 8, 0);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.items);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.MatButton],\n      styles: [\":root{--border-color: #dfdfdf;--background-color: #ffffff;--background-box-title: rgb(171, 181, 234);--primary-color: #ffffff;--secondary-color: rgb(171, 181, 234);--highlight-color: #add7ff;--text-color: #979797;--button-color: #d1d1d1;--button-hover-color: #c7c7c7;--button-active-color: #cecfd0}html,body{margin:0;padding:0;width:100vw;height:100vh;overflow:hidden;font-family:Roboto,sans-serif;background-color:var(--background-color)}header{height:66px;border-bottom:1px solid var(--border-color);padding-left:20px}header h2{margin:0;line-height:66px}header a{color:#000}.them-edit-link{position:absolute;top:10px;right:100px;color:#000;font-size:40px}.them-edit-link a{text-decoration:none}.github-link{position:absolute;top:10px;right:20px;color:#000}.wrapper{width:100%;height:calc(100vh - 67px);display:flex}.col{overflow:auto;width:300px;height:100%;border-right:1px solid var(--border-color)}.drag-drawflow{line-height:50px;border-bottom:1px solid var(--border-color);padding-left:20px;cursor:move;-webkit-user-select:none;user-select:none}.menu{position:absolute;height:40px;display:block;background:#abb5ea;width:100%}.menu ul{padding:0;margin:0;line-height:40px}.menu ul li{display:inline-block;margin-left:10px;border-right:1px solid var(--border-color);padding-right:10px;line-height:40px;cursor:pointer}.menu ul li.selected{font-weight:700}.btn-export{float:right;position:absolute;top:10px;right:10px;color:#abb5ea;font-weight:700;border:1px solid #cbe3fa;background:var(--button-color);padding:5px 10px;border-radius:4px;cursor:pointer;z-index:5;transition:background-color .3s ease}.btn-export:hover{background:var(--button-hover-color)}.btn-export:active{background:var(--button-active-color)}.btn-clear{float:right;position:absolute;top:10px;right:85px;color:#abb5ea;font-weight:700;border:1px solid #96015b;background:#e3195a;padding:5px 10px;border-radius:4px;cursor:pointer;z-index:5}.swal-wide{width:80%!important}.btn-lock{float:right;position:absolute;bottom:10px;right:140px;display:flex;font-size:24px;color:#abb5ea;padding:5px 10px;background:#555;border-radius:4px;border-right:1px solid var(--border-color);z-index:5;cursor:pointer}.cursor-pointer{cursor:pointer}.edit-button{background:none;border:none;cursor:pointer;color:#007bff;font-size:16px}.bar-zoom{float:right;position:absolute;bottom:10px}.sidebar{display:flex;flex-direction:column;align-items:center}.add-button{margin-top:20px;background-color:#43b993}.bar-zoom{float:right;position:absolute;bottom:10px;right:10px;display:flex;font-size:24px;color:#abb5ea;padding:5px 10px;background:#555;border-radius:4px;border-right:1px solid var(--border-color);z-index:5}.bar-zoom svg{cursor:pointer;padding-left:10px}.bar-zoom svg:nth-child(1){padding-left:0}.floating-button{position:fixed;bottom:20px;right:20px;z-index:1000;background-color:#a1cffa;color:#000}#drawflow{padding-left:200px;display:flex;width:70%;height:100vh;top:40px;background:var(--background-color);background-size:25px 25px;background-image:linear-gradient(to right,#f1f1f1 1px,transparent 1px),linear-gradient(to bottom,#f1f1f1 1px,transparent 1px)}@media only screen and (max-width: 768px){.col{width:50px}.col .drag-drawflow span{display:none}#drawflow{width:calc(100vw - 51px)}}.drawflow .drawflow-node{display:flex;align-items:center;position:absolute;background:#d2fdfd;width:160px;min-height:40px;border-radius:4px;border:1px solid #907373;color:#000;z-index:2;padding:1px;text-align:center}.drawflow .drawflow-node.selected{background:#8994d2;border:1px solid var(--highlight-color);box-shadow:0 2px 20px 2px var(--highlight-color)}.drawflow .drawflow-node.selected .title-box{color:#9bc1e4}.drawflow .connection .main-path{stroke:#b7dcff;stroke-width:3px}.drawflow .drawflow-node .input,.drawflow .drawflow-node .output{height:15px;width:15px;border:2px solid var(--border-color)}.drawflow .drawflow-node .input:hover,.drawflow .drawflow-node .output:hover{background:#badcfc}.drawflow .drawflow-node .output{right:10px}.drawflow .drawflow-node .input{left:-10px;background:#abb5ea}.drawflow>.drawflow-delete{border:2px solid #43b993;background:#abb5ea;color:#43b993;box-shadow:0 2px 20px 2px #43b993}.drawflow-delete{border:2px solid var(--highlight-color);background:#abb5ea;color:var(--highlight-color);box-shadow:0 2px 20px 2px var(--highlight-color)}.drawflow-node .title-box{height:50px;line-height:50px;background:var(--background-box-title);border-bottom:1px solid #e9e9e9;border-radius:10px 10px 0 0;padding-left:10px}.drawflow .title-box svg{position:initial}.drawflow-node .box{padding:10px 20px 20px;font-size:14px;color:var(--text-color)}.drawflow-node .box p{margin-top:5px;margin-bottom:5px}.drawflow-node.welcome{width:250px}.drawflow-node.slack .title-box{border-radius:4px}.drawflow-node input,.drawflow-node select,.drawflow-node textarea{border-radius:4px;border:1px solid var(--border-color);height:30px;line-height:30px;font-size:16px;width:158px;color:var(--text-color)}.drawflow-node textarea{height:100px}.drawflow-node.personalized{background:#f18080;height:200px;text-align:center;color:#abb5ea}.drawflow-node.personalized .input{background:#ff0}.drawflow-node.personalized .output{background:green}.drawflow-node.personalized.selected{background:#b9b9f3}.drawflow .connection .point{stroke:var(--border-color);stroke-width:2;fill:#abb5ea;transform:translate(-9999px,-9999px)}.drawflow .connection .point.selected,.drawflow .connection .point:hover{fill:#a1cffa}.modal{display:none;position:fixed;z-index:7;left:0;top:0;width:100vw;height:100vh;overflow:auto;background-color:#000000b3}.modal-content{position:relative;background-color:#fefefe;margin:15% auto;padding:20px;border:1px solid #888;width:400px;border-radius:10px;animation:fadeIn .5s ease}.modal .close{color:#aaa;float:right;font-size:28px;font-weight:700;cursor:pointer}@media only screen and (max-width: 768px){.modal-content{width:80%}}body{overflow:auto}.container{display:flex;padding:10px}.sidebar{width:300px;margin-right:10px;padding:20px 50px 20px 20px;background-color:var(--secondary-color);border-right:1px solid #ccc;border-radius:10px;box-shadow:0 2px 10px #0000001a;animation:slideIn .5s ease;align-items:center}#draggable-list{list-style-type:none;padding:0}.draggable-item{display:flex;justify-content:space-between;align-items:center;width:300px;padding:10px;margin:5px 0;background-color:#ddd;cursor:grab;border-radius:10px;transition:transform .1s ease,background-color .2s ease}.draggable-item:hover{background-color:#ccc}.draggable-item:active{cursor:grabbing;transform:scale(1.05)}.draggable-item input{flex-grow:1;margin-right:10px;border-radius:5px;padding:5px;border:1px solid var(--border-color)}.draggable-item button{margin-left:5px;padding:5px 10px;background-color:rgb(255,169,169)smoke;color:#abb5ea;border:none;border-radius:5px;cursor:pointer;transition:background-color .3s ease}.draggable-item button:hover{background-color:var(--button-hover-color)}.draggable-item button:active{background-color:var(--button-active-color)}button{padding:5px 20px;background-color:#8a2be2;color:#abb5ea;border:none;border-radius:10px;cursor:pointer;transition:background-color .3s ease}button:hover{background-color:var(--button-hover-color)}button:active{background-color:var(--button-active-color)}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes slideIn{0%{transform:translate(-100%)}to{transform:translate(0)}}.export-button{position:absolute;top:10px;right:10px;margin-bottom:20px}\\n\"],\n      encapsulation: 2\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}